Include src/v2ray/set_stream "$@"

V2rayStreamTransport()
{
    V2raySetStreamTransport
}

V2rayStreamTcpSettings()
{
    if [ "${1:-inbound}" != "inbound" ] 
    then
        return
    fi

    V2raySetTcpProxyProtocol

    JQs merge_c stream_transport_settings --arg acceptProxyProtocol "$tcp_accept_proxy_protocol" '. * {
        "acceptProxyProtocol": $acceptProxyProtocol | test("true")
    }'
}

V2rayStreamWebSocketSettings()
{
    V2raySetWebSocketPath

    if [ "${1:-inbound}" == "inbound" ] 
    then
        V2raySetWebSocketAcceptProxyProtocol
        V2raySetWebSocketInboundMaxEarlyData
        V2raySetWebsocketUseBrowserForwarding

        if [ "$ws_max_early_data" -gt 0 ] 
        then
            V2raySetWebSocketEarlyDataHeaderName
        else
            ws_early_data_header_name=""
        fi

        JQs merge_c stream_transport_settings --arg acceptProxyProtocol "$ws_accept_proxy_protocol" \
        --arg path "$ws_path" --arg maxEarlyData "$ws_max_early_data" \
        --arg useBrowserForwarding "$ws_use_browser_forwarding" \
        --arg earlyDataHeaderName "$ws_early_data_header_name" '. * {
            "acceptProxyProtocol": $acceptProxyProtocol | test("true"),
            "path": $path,
            "maxEarlyData": $maxEarlyData | tonumber,
            "useBrowserForwarding": $useBrowserForwarding | test("true"),
            "earlyDataHeaderName": $earlyDataHeaderName
        }'
    else
        V2raySetWebSocketHeaders
        V2raySetOutboundMaxEarlyData
        V2raySetEarlyDataHeaderName

        JQs merge_c stream_transport_settings --arg acceptProxyProtocol "$ws_accept_proxy_protocol" \
        --arg path "$ws_path" --argjson headers "$ws_headers" \
        --arg maxEarlyData "$ws_max_early_data" \
        --arg earlyDataHeaderName "$ws_early_data_header_name" '. * {
            "acceptProxyProtocol": $acceptProxyProtocol | test("true"),
            "path": $path,
            "headers": $headers,
            "maxEarlyData": $maxEarlyData | tonumber,
            "earlyDataHeaderName": $earlyDataHeaderName
        }'
    fi
}

V2rayStreamMkcpSettings()
{
    V2raySetMkcpMtu
    V2raySetMkcpTti
    V2raySetMkcpUplinkCapacity
    V2raySetMkcpDownlinkCapacity
    V2raySetMkcpCongestion
    V2raySetMkcpReadBufferSize
    V2raySetMkcpWriteBufferSize
    V2raySetMkcpSeed

    JQs merge_c stream_transport_settings --arg mtu "$mkcp_mtu" \
    --arg tti "$mkcp_tti" --arg uplinkCapacity "$mkcp_uplink_capacity" \
    --arg downlinkCapacity "$mkcp_downlink_capacity" --arg congestion "$mkcp_congestion" \
    --arg readBufferSize "$mkcp_read_buffer_size" --arg writeBufferSize "$mkcp_write_buffer_size" \
    --arg seed "$mkcp_seed" '. * {
        "mtu": $mtu | tonumber,
        "tti": $tti | tonumber,
        "uplinkCapacity": $uplinkCapacity | tonumber,
        "downlinkCapacity": $downlinkCapacity | tonumber,
        "congestion": $congestion | test("true"),
        "readBufferSize": $readBufferSize | tonumber,
        "writeBufferSize": $writeBufferSize | tonumber,
        "seed": "$seed"
    }'
}

V2rayStreamGrpcSettings()
{
    V2raySetGrpcServiceName

    JQs merge_c stream_transport_settings --arg serviceName "$grpc_service_name" '. * {
        "serviceName": "$serviceName"
    }'
}

V2rayStreamQuicSettings()
{
    return
}

V2rayStreamMeekSettings()
{
    V2raySetMeekUrl
    JQs merge_c stream_transport_settings --arg url "$meek_url" '. * {
        "url": "$url"
    }'
}

V2rayStreamHttpupgradeSettings()
{
    V2raySetHttpupgradePath
    V2raySetHttpupgradeHost

    JQs merge_c stream_transport_settings --arg path "$httpupgrade_path" \
    --arg host "$httpupgrade_host" '. * {
        "path": "$path",
        "host": "$host"
    }'
}

V2rayStreamHysteria2Settings()
{
    V2raySetHysteria2Password
    V2raySetHysteria2Udp
    V2raySetHysteria2Congestion

    JQs merge_c stream_transport_settings --arg password "$hysteria2_password" \
    --arg use_udp_extension "$hysteria2_use_udp_extension" \
    --argjson congestion "$hysteria2_congestion" '. * {
        "password": "$password",
        "use_udp_extension": "$use_udp_extension" | test("true"),
        "congestion": "$congestion"
    }'
}

V2rayStreamSecurity()
{
    V2raySetStreamSecurity
}

V2rayStreamTlsSettings()
{
    V2raySetStreamTlsServerName
    V2raySetStreamTlsAlpn
    V2raySetStreamTlsDisableSystemRoot
    V2raySetStreamTlsChainSha256

    if [ -z "${stream_tls_chain_sha256:-}" ] 
    then
        stream_tls_allow_insecure=false
    else
        V2raySetStreamAllowInsecure
    fi

    V2raySetStreamCertificate

    JQs merge_c stream_security_settings --arg serverName "$stream_tls_server_name" \
    --argjson nextProtocol "[$stream_tls_next_protocol]" \
    --arg disableSystemRoot "$stream_disable_system_root" \
    --argjson pinnedPeerCertificateChainSha256 "[$stream_tls_chain_sha256]" \
    --arg allowInsecureIfPinnedPeerCertificate "$stream_tls_allow_insecure" \
    --argjson certificate "$stream_tls_certificate" '. * {
        "serverName": "$serverName",
        "nextProtocol": "$nextProtocol",
        "disableSystemRoot": "$disableSystemRoot" | test("true"),
        "pinnedPeerCertificateChainSha256": "$pinnedPeerCertificateChainSha256",
        "allowInsecureIfPinnedPeerCertificate": "$allowInsecureIfPinnedPeerCertificate" | test("true"),
        "certificate": "$certificate"
    }'
}

V2rayStreamUtlsTlsConfig()
{
    Println "$info 以下为嵌入的 TLS 设置，只有部分内容会被应用到 uTLS"

    V2rayStreamTlsSettings

    stream_utls_tls_config="$stream_security_settings"
    stream_security_settings='{}'
}

V2rayStreamUtlsImitate()
{
    V2raySetStreamUtlsImitate
}

V2rayStreamUtlsNoSNI()
{
    V2raySetStreamUtlsNoSNI
}

V2rayStreamUtlsForceAlpn()
{
    V2raySetStreamUtlsForceAlpn
}

V2rayStreamUtlsSettings()
{
    V2rayStreamUtlsTlsConfig
    V2rayStreamUtlsImitate
    V2rayStreamUtlsNoSNI
    V2rayStreamUtlsForceAlpn

    JQs merge_c stream_security_settings --argjson tlsConfig "$stream_utls_tls_config" \
    --arg imitate "$stream_utls_imitate" \
    --arg noSNI "$stream_utls_noSNI" \
    --arg forceAlpn "$stream_utls_force_alpn" \
    --arg allowInsecureIfPinnedPeerCertificate "$stream_tls_allow_insecure" \
    --argjson certificate "$stream_tls_certificate" '. * {
        "tlsConfig": "$tlsConfig",
        "imitate": "$imitate",
        "noSNI": "$noSNI" | test("true"),
        "forceAlpn": "$forceAlpn"
    }'
}

V2rayStreamSocketMark()
{
    V2raySetStreamSocketMark
}

V2rayStreamSocketTFO()
{
    echo
    inquirer list_input_yn "socket TCP Fast Open 使用系统默认设置" tf_options stream_socket_tfo_system

    if [ "$stream_socket_tfo_system" = false ] 
    then
        V2raySetStreamSocketTFO
    fi
}

V2rayStreamSocketTFOQL()
{
    V2raySetStreamSocketTFOQL
}

V2rayStreamSocketTproxy()
{
    V2raySetStreamSocketTproxy
}

V2rayStreamSocketTcpKeepAliveInterval()
{
    V2raySetStreamSocketTcpKeepAliveInterval
}

V2rayStreamSocketBindToDevice()
{
    V2raySetStreamSocketBindToDevice
}

V2rayStreamSocketMptcp()
{
    echo
    inquirer list_input_yn "socket 多路径 TCP 使用系统默认设置" tf_options stream_socket_mptcp_system

    if [ "$stream_socket_mptcp_system" = false ] 
    then
        V2raySetStreamSocketMptcp
    fi
}

V2rayStreamSocketSettings()
{
    stream_socket_settings='{}'

    if [ "$dist" != "mac" ] 
    then
        V2rayStreamSocketMark

        JQs merge_c stream_socket_settings --arg mark "$stream_socket_mark" '. * {
            "mark": "$mark" | tonumber
        }'
    fi

    V2rayStreamSocketTFO

    if [ "$stream_socket_tfo_system" = false ] 
    then
        JQs merge_c stream_socket_settings --arg tcpFastOpen "$stream_socket_tfo" '. * {
            "tcpFastOpen": "$tcpFastOpen" | test("true")
        }'
    fi

    if [ "$dist" != "mac" ] 
    then
        V2rayStreamSocketTFOQL
        V2rayStreamSocketTproxy
        V2rayStreamSocketTcpKeepAliveInterval

        JQs merge_c stream_socket_settings --arg tcpFastOpenQueueLength "$stream_socket_tfoql" \
        --arg tproxy "$stream_socket_tproxy" --arg tcpKeepAliveInterval "$stream_socket_tcp_keep_alive_interval" '. * {
            "tcpFastOpenQueueLength": "$tcpFastOpenQueueLength" | tonumber,
            "$tproxy": "$tproxy",
            "$tcpKeepAliveInterval": "$tcpKeepAliveInterval" | tonumber
        }'
    fi

    V2rayStreamSocketBindToDevice

    JQs merge_c stream_socket_settings --arg bindToDevice "$stream_socket_bind_to_device" '. * {
        "bindToDevice": "$bindToDevice"
    }'

    if [ "$dist" != "mac" ] 
    then
        V2rayStreamSocketMptcp

        if [ "$stream_socket_mptcp_system" = false ] 
        then
            JQs merge_c stream_socket_settings --arg mptcp "$stream_socket_mptcp" '. * {
                "mptcp": "$mptcp" | test("true")
            }'
        fi
    fi
}

V2rayStream()
{
    V2rayStreamTransport

    stream_transport_settings='{}'

    case $stream_transport_options in
        0) V2rayStreamTcpSettings "$@"
        ;;
        1) V2rayStreamWebSocketSettings "$@"
        ;;
        2) V2rayStreamMkcpSettings "$@"
        ;;
        3) V2rayStreamGrpcSettings "$@"
        ;;
        4) V2rayStreamQuicSettings "$@"
        ;;
        5) V2rayStreamMeekSettings "$@"
        ;;
        6) V2rayStreamHttpupgradeSettings "$@"
        ;;
        7) V2rayStreamHysteria2Settings "$@"
        ;;
        *) return
        ;;
    esac

    V2rayStreamSecurity

    stream_security_settings='{}'

    case $stream_security in
        tls) V2rayStreamTlsSettings
        ;;
        utls)
            if [ "$stream_transport_options" -gt 1 ] 
            then
                Println "$error 仅可以在 TCP, WebSocket 传输方式中使用 uTLS\n"
            fi
            V2rayStreamUtlsSettings
        ;;
        *) 
        ;;
    esac

    V2rayStreamSocketSettings

    new_stream='{}'

    JQs merge_c new_stream --arg transport "$stream_transport" \
        --argjson transportSettings "$stream_transport_settings" \
        --arg security "$stream_security" \
        --argjson securitySettings "$stream_security_settings" \
        --argjson socketSettings "$stream_socket_settings" \
    '{
        "transport": $transport,
        "transportSettings": $transportSettings,
        "security": $security,
        "securitySettings": $securitySettings,
        "socketSettings": $socketSettings
    }'
}
