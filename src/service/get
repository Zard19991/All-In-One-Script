ServiceGet()
{
    JQInstall

    local service_id=$1

    if [ ! -s "$SERVICES_CONFIG" ] 
    then
        mkdir -p "$SERVICES_ROOT"
        if [ -f "$IPTV_ROOT"/services.json ] 
        then
            mv "$IPTV_ROOT"/services.json "$SERVICES_CONFIG"
        else
            printf '{"%s":{"%s":[]}}' "4gtv" "accounts" > "$SERVICES_CONFIG"
        fi
    fi

    SetDelimiters

    case $service_id in
        4gtv) 
            IFS=$'\003\t' read -r d_4gtv_proxy _4gtv_acc_email _4gtv_acc_pass _4gtv_acc_token < <(JQs flat "$SERVICES_CONFIG" '' '
            if type == "object" then . else {} end |
            [(."'"$service_id"'".proxy // "") + "\u0003"] + ((."'"$service_id"'".accounts | if type == "object" then . else {} end) as $accounts |
            reduce ({email,password,token}|keys_unsorted[]) as $key ([];
            $accounts[$key] as $val | if $val then
                . + [$val + "\u0002\u0003"]
            else
                . + ["\u0003"]
            end
            ))|@tsv' "${delimiters[@]}")

            IFS="${delimiters[1]}" read -r -a _4gtv_accs_email <<< "$_4gtv_acc_email"
            IFS="${delimiters[1]}" read -r -a _4gtv_accs_pass <<< "$_4gtv_acc_pass"
            IFS="${delimiters[1]}" read -r -a _4gtv_accs_token <<< "$_4gtv_acc_token"

            _4gtv_accs_count=${#_4gtv_accs_email[@]}
        ;;
        alist) 
            IFS=$'\004\t' read -r alist_name alist_url alist_acc_username \
            alist_acc_password alist_acc_token < <(JQs flat "$SERVICES_CONFIG" '' '
            if type == "object" then . else {} end |
            (."'"$service_id"'" | if type == "object" then . else {} end) as $alist |
            ($alist.accs // {} | if type == "object" then . else {} end) as $accs |
            reduce ({name,url}|keys_unsorted[]) as $key ([];
            $alist[$key] as $val | if $val then
                . + [$val + "\u0002\u0004"]
            else
                . + ["\u0004"]
            end
            ) + reduce ({username,password,token}|keys_unsorted[]) as $key ([];
                $accs[$key] as $val | if $val then
                    . + [$val + "\u0003\u0004"]
                else
                    . + ["\u0004"]
                end
            )|@tsv' "${delimiters[@]}")

            IFS="${delimiters[1]}" read -r -a alists_name <<< "$alist_name"
            IFS="${delimiters[1]}" read -r -a alists_url <<< "$alist_url"
            IFS="${delimiters[2]}" read -r -a alists_acc_username <<< "$alist_acc_username"
            IFS="${delimiters[2]}" read -r -a alists_acc_password <<< "$alist_acc_password"
            IFS="${delimiters[2]}" read -r -a alists_acc_token <<< "$alist_acc_token"

            alists_count=${#alists_name[@]}
        ;;
        rclone) 
        case ${2:-} in
            serve) 
                IFS=$'\004\t' read -r m_serves_remote m_serves_protocol m_serves_addr m_serves_htpasswd \
                m_serves_args m_serves_user m_serves_pass < <(JQs flat "$SERVICES_CONFIG" '.[0].rclone.serve' '
                if type == "object" then . else {} end | . as $serve |
                ($serve.accs | if type == "object" then . else {} end) as $accs |
                reduce ({remote,protocol,addr,htpasswd,args}|keys_unsorted[]) as $key ([];
                $serve[$key] as $val | if $val then
                    . + [$val + "\u0002\u0004"]
                else
                    . + ["\u0004"]
                end
                ) + reduce ({user,pass}|keys_unsorted[]) as $key ([];
                    $accs[$key] as $val | if $val then
                        . + [$val + "\u0003\u0004"]
                    else
                        . + ["\u0004"]
                    end
                )|@tsv' "${delimiters[@]}")

                IFS="${delimiters[1]}" read -r -a rclone_serves_remote <<< "$m_serves_remote"
                IFS="${delimiters[1]}" read -r -a rclone_serves_protocol <<< "$m_serves_protocol"
                IFS="${delimiters[1]}" read -r -a rclone_serves_addr <<< "$m_serves_addr"
                IFS="${delimiters[1]}" read -r -a rclone_serves_htpasswd <<< "$m_serves_htpasswd"
                IFS="${delimiters[1]}" read -r -a rclone_serves_args <<< "$m_serves_args"
                IFS="${delimiters[2]}" read -r -a rclone_serves_user <<< "$m_serves_user"
                IFS="${delimiters[2]}" read -r -a rclone_serves_pass <<< "$m_serves_pass"

                rclone_serves_count=${#rclone_serves_remote[@]}
            ;;
            sync) 
                IFS=$'\004\t' read -r m_sync_rsync m_sync_source m_sync_target m_sync_args \
                m_sync_exclude_before m_sync_include m_sync_exclude_after < <(JQs flat "$SERVICES_CONFIG" '.[0].rclone.sync' '
                if type == "object" then . else {} end | . as $sync |
                reduce ({rsync,source,target,args,exclude_before,include,exclude_after}|keys_unsorted[]) as $key ([];
                $sync[$key] as $val | if $val then
                    . + [$val + "\u0002\u0004"]
                else
                    . + ["\u0004"]
                end
                )|@tsv' "${delimiters[@]}")

                IFS="${delimiters[1]}" read -r -a rclone_syncs_rsync <<< "$m_sync_rsync"
                IFS="${delimiters[1]}" read -r -a rclone_syncs_source <<< "$m_sync_source"
                IFS="${delimiters[1]}" read -r -a rclone_syncs_target <<< "$m_sync_target"
                IFS="${delimiters[1]}" read -r -a rclone_syncs_args <<< "$m_sync_args"
                IFS="${delimiters[1]}" read -r -a rclone_syncs_exclude_before <<< "$m_sync_exclude_before"
                IFS="${delimiters[1]}" read -r -a rclone_syncs_include <<< "$m_sync_include"
                IFS="${delimiters[1]}" read -r -a rclone_syncs_exclude_after <<< "$m_sync_exclude_after"

                rclone_syncs_count=${#rclone_syncs_rsync[@]}
            ;;
            *) 
            IFS=$'\004\t' read -r m_remotes_name m_remotes_type m_remotes_url \
            m_remotes_vendor m_remotes_user m_remotes_pass m_remotes_path m_remotes_mount_path \
            m_remotes_mount_flag < <(JQs flat "$SERVICES_CONFIG" '.[0].rclone.remote' '
            if type == "object" then . else {} end | . as $remote |
            ($remote.mount | if type == "object" then . else {} end) as $mount |
            reduce ({name,type,url,vendor,user,pass}|keys_unsorted[]) as $key ([];
                $remote[$key] as $val | if $val then
                    . + [$val + "\u0002\u0004"]
                else
                    . + ["\u0004"]
                end
            ) + reduce ({path,mount_path,flags}|keys_unsorted[]) as $key ([];
                $mount[$key] as $val | if $val then
                    . + [$val + "\u0003\u0004"]
                else
                    . + ["\u0004"]
                end
            )|@tsv' "${delimiters[@]}")

            IFS="${delimiters[1]}" read -r -a rclone_remotes_name <<< "$m_remotes_name"
            IFS="${delimiters[1]}" read -r -a rclone_remotes_type <<< "$m_remotes_type"
            IFS="${delimiters[1]}" read -r -a rclone_remotes_url <<< "$m_remotes_url"
            IFS="${delimiters[1]}" read -r -a rclone_remotes_vendor <<< "$m_remotes_vendor"
            IFS="${delimiters[1]}" read -r -a rclone_remotes_user <<< "$m_remotes_user"
            IFS="${delimiters[1]}" read -r -a rclone_remotes_pass <<< "$m_remotes_pass"
            IFS="${delimiters[2]}" read -r -a rclone_remotes_path <<< "$m_remotes_path"
            IFS="${delimiters[2]}" read -r -a rclone_remotes_mount_path <<< "$m_remotes_mount_path"

            new_flags=("${rclone_remotes_mount_path[@]//*/}")
            flags_if_null=$(JoinByChar "${delimiters[2]}" "${new_flags[@]}")
            IFS="${delimiters[2]}" read -r -a rclone_remotes_mount_flag <<< "${m_remotes_mount_flag:-$flags_if_null}${delimiters[2]}"

            rclone_remotes_count=${#rclone_remotes_name[@]}
            ;;
        esac
        ;;
        kcc)
            IFS="${delimiters[2]}"$'\t' read -r kcc_format kcc_process kcc_args kcc_output \
            m_source < <($JQ_FILE -r --arg delimiter "${delimiters[1]}" --arg delimiter2 "${delimiters[2]}" '
            if type == "object" then . else {} end |
            (.kcc | if type == "object" then . else {} end) as $kcc |
            reduce ({format,process,args,output,source}|keys_unsorted[]) as $key ([];
            $kcc[$key] as $val | ($val | type) as $type | if $val then
                if ($type == "array") then
                    . + [($val|join($delimiter)) + $delimiter2]
                else
                    . + [($val|tostring) + $delimiter2]
                end
            else
                . + [$delimiter2]
            end
            )|@tsv' "$SERVICES_CONFIG")

            IFS="${delimiters[1]}" read -r -a kcc_sources <<< "$m_source"
        ;;
        iperf)
            IFS=$'\004\t' read -r m_iperf_name m_iperf_type m_iperf_target \
            m_iperf_args < <(JQs flat "$SERVICES_CONFIG" '.[0].iperf' '
            if type == "object" then . else {} end | . as $iperf |
            reduce ({name,type,target,args}|keys_unsorted[]) as $key ([];
            $iperf[$key] as $val | if $val then
                . + [$val + "\u0002\u0004"]
            else
                . + ["\u0004"]
            end
            )|@tsv' "${delimiters[@]}")

            IFS="${delimiters[1]}" read -r -a iperf_names <<< "$m_iperf_name"
            IFS="${delimiters[1]}" read -r -a iperf_types <<< "$m_iperf_type"
            IFS="${delimiters[1]}" read -r -a iperf_targets <<< "$m_iperf_target"
            IFS="${delimiters[1]}" read -r -a iperf_args <<< "$m_iperf_args"

            iperf_count=${#iperf_types[@]}
        ;;
        *)
            IFS=$'\003\t' read -r m_user_name m_phone_number m_password m_access_token m_device_no m_device_id m_refresh < <(JQs flat "$SERVICES_CONFIG" '' '
            if type == "object" then . else {} end |
            (."'"$service_id"'".accounts | if type == "object" then . else {} end) as $accounts |
            reduce ({user_name,phone_number,password,access_token,device_no,device_id,refresh}|keys_unsorted[]) as $key ([];
            $accounts[$key] as $val | if $val then
                . + [$val + "\u0002\u0003"]
            else
                . + ["\u0003"]
            end
            )|@tsv' "${delimiters[@]}")

            if [ -z "$m_user_name" ] 
            then
                ts_accs_count=0
                return 0
            fi

            IFS="${delimiters[1]}" read -r -a ts_accs_user_name <<< "$m_user_name"

            if [ -z "$m_phone_number" ] 
            then
                ts_accs_phone_number=("${ts_accs_user_name[@]//*/}")
            else
                IFS="${delimiters[1]}" read -r -a ts_accs_phone_number <<< "$m_phone_number"
            fi

            IFS="${delimiters[1]}" read -r -a ts_accs_password <<< "$m_password"
            IFS="${delimiters[1]}" read -r -a ts_accs_access_token <<< "$m_access_token"
            IFS="${delimiters[1]}" read -r -a ts_accs_device_no <<< "$m_device_no"
            IFS="${delimiters[1]}" read -r -a ts_accs_device_id <<< "$m_device_id"
            IFS="${delimiters[1]}" read -r -a ts_accs_refresh <<< "$m_refresh"

            ts_accs_count=${#ts_accs_user_name[@]}
        ;;
    esac

    return 0
}
